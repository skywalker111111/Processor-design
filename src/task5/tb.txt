`timescale 1ns/1ps
module tb;
    reg clock;
    reg rst_n;
    reg [8:0] addr;
    reg wEn;
    reg [31:0] wDat;
    reg working;

    // 输出信号
    wire [3:0] icode, ifun;
    wire [2:0] rA, rB, rd;
    wire [14:0] valC;
    wire [31:0] valA, valB, valE, aluA, aluB ;
    wire [31:0] r0, r1, r2, r3, r4, r5, r6, r7;

    // 内部信号观测
    wire [31:0]ID_EX_valA=dut.ID_EX_valA;
    wire [31:0] fwd_valB=dut.fwd_valB;
    wire [2:0] ID_EX_rB=dut.ID_EX_rB;
    wire [2:0] current_rB=dut.current_rB;
    wire [2:0] EX_WB_rd=dut.EX_WB_rd;
    wire [8:0]  pc = dut.pc;
    wire [3:0]  ID_EX_icode = dut.ID_EX_icode;
    wire [3:0]  ID_EX_ifun = dut.ID_EX_ifun;

    processor dut (
        .clock(clock),
        .rst_n(rst_n),
        .addr(addr),
        .wEn(wEn),
        .wDat(wDat),
        .working(working),
        .icode(icode),
        .ifun(ifun),
        .rA(rA),
        .rB(rB),
        .rd(rd),
        .valC(valC),
        .valA(valA),
        .valB(valB),
        .valE(valE),
        .aluA(aluA),
        .aluB(aluB),
        .r0(r0),
        .r1(r1),
        .r2(r2),
        .r3(r3),
        .r4(r4),
        .r5(r5),
        .r6(r6),
        .r7(r7)
    );

    // 时钟生成
    initial begin
        clock = 0;
        forever #10 clock = ~clock;  // 50MHz
    end

    // 复位与测试逻辑
    initial begin
        // 初始化
        rst_n = 0;
        working = 0;
        wEn = 0;
        addr = 0;
        wDat = 0;
        #100;
        
        // 释放复位
        rst_n = 1;
        #20;

        // 阶段1：写入指令
        working = 0;
        wEn = 1;
        addr = 0; wDat = 32'b0001_0000_000_000_000_100101011110110; #20; // r0 = 0x4AE5
        addr = 1; wDat = 32'b0001_0000_000_000_001_100101011110111; #20; // r1 = 0x4AE6
        addr = 2; wDat = 32'b0001_0000_000_000_010_100101011111000; #20; // r2 = 0x4AE7
        addr = 3; wDat = 32'b0001_0000_000_000_011_100101011111001; #20; // r3 = 0x4AE8
        addr = 4; wDat = 32'b0010_0000_001_010_011_000000000000000; #20; // r3 = r1 + r2
        addr = 5; wDat = 32'b0010_0001_000_011_110_000000000000000; #20; // r6 = r0 - r3
        addr = 6; wDat = 32'b0011_0000_000_110_101_000000000000000; #20; // r5 = r0 | r6
        addr = 7; wDat = 32'b0011_0001_001_000_111_000000000000011; #20; // r7 = r1 << 3


        // 阶段2：执行指令
        working = 1;
        wEn = 0;
        #500;

        // 结束仿真
        $finish;
    end

    // 波形记录
    initial begin
        $dumpfile("wave.vcd");
        $dumpvars(0, tb);
    end
endmodule
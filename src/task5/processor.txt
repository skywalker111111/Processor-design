`timescale 1ns/1ps
module processor (
    input clock,
    input rst_n,
    input [8:0] addr,
    input wEn,
    input [31:0] wDat,
    input working,
    output [3:0] icode,
    output [3:0] ifun,
    output [2:0] rA,
    output [2:0] rB,
    output [2:0] rd,
    output [14:0] valC,
    output [31:0] valA,
    output [31:0] valB,
    output [31:0] valE,
    output [31:0] aluA,
    output [31:0] aluB,
    output [31:0] r0,
    output [31:0] r1,
    output [31:0] r2,
    output [31:0] r3,
    output [31:0] r4,
    output [31:0] r5,
    output [31:0] r6,
    output [31:0] r7
);

    // ================== 寄存器定义 ==================
    reg [8:0]  pc;
    reg [31:0] IF_ID_instr;
    reg [8:0]  IF_ID_pc;
    reg [3:0]  ID_EX_icode;
    reg [3:0]  ID_EX_ifun;
    reg [31:0] ID_EX_valA;
    reg [31:0] ID_EX_valB;
    reg [14:0] ID_EX_valC;
    reg [2:0]  ID_EX_rd;
    reg [2:0]  ID_EX_rA;
    reg [2:0]  ID_EX_rB;
    reg [3:0]  EX_WB_icode;
    reg [31:0] EX_WB_valE;
    reg [2:0]  EX_WB_rd;
    reg [14:0] EX_WB_valC;

    // ================== 初始化逻辑 ==================
    always @(posedge clock or negedge rst_n) begin
        if (!rst_n) begin
            pc          <= 9'b0;
            IF_ID_instr <= 32'b0;
            IF_ID_pc    <= 9'b0;
            ID_EX_icode <= 4'b0;
            ID_EX_ifun  <= 4'b0;
            ID_EX_valA  <= 32'b0;
            ID_EX_valB  <= 32'b0;
            ID_EX_valC  <= 15'b0;
            ID_EX_rA    <= 3'b0;
            ID_EX_rB    <= 3'b0;
            ID_EX_rd    <= 3'b0;
            EX_WB_icode <= 4'b0;
            EX_WB_valE  <= 32'b0;
            EX_WB_rd    <= 3'b0;
            EX_WB_valC  <= 15'b0;
        end else if (working) begin
            // IF阶段
            IF_ID_instr <= instruction;
            IF_ID_pc    <= pc;
            pc          <= pc + 1;

            // ID阶段
            ID_EX_icode <= IF_ID_instr[31:28];
            ID_EX_ifun  <= IF_ID_instr[27:24];
            ID_EX_rA = IF_ID_instr[23:21];
            ID_EX_rB = IF_ID_instr[20:18];
            ID_EX_rd    <= IF_ID_instr[17:15];
            ID_EX_valC  <= IF_ID_instr[14:0];
            ID_EX_valA  <= fwd_valA;
            ID_EX_valB  <= fwd_valB;

            // EX/WB阶段
            EX_WB_icode <= ID_EX_icode;
            EX_WB_valE  <= alu_result;
            EX_WB_rd    <= ID_EX_rd;
            EX_WB_valC  <= ID_EX_valC;
        end
    end

    // ================== RAM接口 ==================
    wire [31:0] instruction;
    wire [8:0] ram_addr = working ? pc : addr;
    ram u_ram (
        .clock(clock),
        .rst_n(rst_n),
        .addr(ram_addr),
        .wEn(wEn),
        .wDat(wDat),
        .rEn(working),
        .rDat(instruction)
    );

    // ================== ALU逻辑 ==================
    wire [31:0] alu_result;
    reg  [3:0]  alufun;
    assign aluA = fwd_valA;
    assign aluB = (ID_EX_icode == 4'h3 && ID_EX_ifun == 4'h1) ? 
                 {17'b0, ID_EX_valC} : fwd_valB;

    always @(*) begin
        case (ID_EX_icode)
            4'h2: begin
                case (ID_EX_ifun)
                    4'h0: alufun = 4'h0;  // ADD
                    4'h1: alufun = 4'h1;  // SUB
                    default: alufun = 4'h0;
                endcase
            end
            4'h3: begin
                case (ID_EX_ifun)
                    4'h0: alufun = 4'h2;  // OR
                    4'h1: alufun = 4'h3;  // SLL
                    default: alufun = 4'h0;
                endcase
            end
            default: alufun = 4'h5;
        endcase
    end

    alu u_alu (
        .aluA(aluA),
        .aluB(aluB),
        .alufun(alufun),
        .valE(alu_result)
    );

    // ================== 寄存器堆 ==================
    wire [31:0] regs_valA, regs_valB;
    wire [2:0] current_rA = IF_ID_instr[23:21];
    wire [2:0] current_rB = IF_ID_instr[20:18];
    wire [31:0] fwd_valA = (EX_WB_rd == ID_EX_rA && EX_WB_icode != 0) ? 
                          EX_WB_valE : regs_valA;
    wire [31:0] fwd_valB = (EX_WB_rd == ID_EX_rB && EX_WB_icode != 0) ? 
                          EX_WB_valE : regs_valB;

    regfile u_regfile (
        .dstE((EX_WB_icode >= 4'h2) ? {1'b0, EX_WB_rd} : 4'hf),
        .valE(EX_WB_valE),
        .dstM((EX_WB_icode == 4'h1) ? {1'b0, EX_WB_rd} : 4'hf),
        .valM((EX_WB_icode == 4'h1) ? {17'b0, EX_WB_valC} : 32'b0),
        .rAddr1(ID_EX_rA),
        .rAddr2(ID_EX_rB),
        .rData1(regs_valA),
        .rData2(regs_valB),
        .reset(~rst_n),
        .clock(clock),
        .r0(r0),
        .r1(r1),
        .r2(r2),
        .r3(r3),
        .r4(r4),
        .r5(r5),
        .r6(r6),
        .r7(r7)
    );

    // ================== 调试信号 ==================
    assign icode = IF_ID_instr[31:28];
    assign ifun  = IF_ID_instr[27:24];
    assign rA    = current_rA;
    assign rB    = current_rB;
    assign rd    = IF_ID_instr[17:15];
    assign valC  = IF_ID_instr[14:0];
    assign valA  = regs_valA;
    assign valB  = regs_valB;
    assign valE  = EX_WB_valE;

endmodule
`timescale 1ns/1ps
module processor (
    input clock,               // 时钟信号
    input rst_n,               // 复位信号
    input [8:0] addr,          // 存储器地址
    input wEn,                 // 写使能
    input [31:0] wDat,         // 写数据
    input working,             // 处理器使能信号
    output [31:0] r0,          // 寄存器%r0
    output [31:0] r1,          // 寄存器%r1
    output [31:0] r2,          // 寄存器%r2
    output [31:0] r3,          // 寄存器%r3
    output [31:0] r4,          // 寄存器%r4
    output [31:0] r5,          // 寄存器%r5
    output [31:0] r6,          // 寄存器%r6
    output [31:0] r7,          // 寄存器%r7
    
    // 新增：译码输出
    output [3:0] icode,        // 指令码
    output [3:0] ifun,         // 功能码
    output [2:0] rA,           // 源寄存器A (rs1)
    output [2:0] rB,           // 源寄存器B (rs2)
    output [2:0] rd,           // 目的寄存器
    output [14:0] valC,        // 立即数
    output [31:0] valA,        // 源寄存器A的值
    output [31:0] valB         // 源寄存器B的值
);

    localparam ZERO_DATA = 32'b0;
    localparam ZERO_ADDR = 9'b0;

    // IO 信号
    reg [8:0] ram_addr;
    wire [31:0] instruction;
    wire rEn;

    // 寄存器堆信号
    reg [31:0] valM; // 写回值
    reg [3:0] dstM;  // 写回目标寄存器

    // 实例化存储器
    ram u_ram (
        .clock(clock),
        .rst_n(rst_n),
        .addr(ram_addr),
        .wEn(wEn),
        .wDat(wDat),
        .rEn(rEn),
        .rDat(instruction)
    );

    // 实例化寄存器堆（修改：添加读取端口）
    regfile u_regfile (
        .dstE(4'b0000),   // 暂不使用
        .valE(32'b0),     // 暂不使用
        .dstM(dstM),      // 写回目标寄存器
        .valM(valM),      // 写回值
        
        .rAddr1(rA),      // 源寄存器A地址
        .rAddr2(rB),      // 源寄存器B地址
        .rData1(valA),    // 源寄存器A的值
        .rData2(valB),    // 源寄存器B的值
        
        .reset(!rst_n),   // 使用异步复位信号
        .clock(clock),
        .r0(r0),
        .r1(r1),
        .r2(r2),
        .r3(r3),
        .r4(r4),
        .r5(r5),
        .r6(r6),
        .r7(r7)
    );

    // PC 寄存器
    reg [8:0] pc;
    always @(posedge clock or negedge rst_n) begin
        if (!rst_n) begin
            pc <= ZERO_ADDR;
        end
        else if (working) begin
            pc <= pc + 9'b1;
        end
        else begin
            pc <= ZERO_ADDR;
        end
    end

    // 内存地址多路复用
    always @(*) begin
        if (working == 1'b0 && wEn == 1'b1) begin
            ram_addr = addr;
        end
        else if (working == 1'b1) begin
            ram_addr = pc;
        end
        else begin
            ram_addr = ZERO_ADDR;
        end
    end

    assign rEn = working;

    // 指令解析
    assign icode = instruction[31:28];
    assign ifun  = instruction[27:24];
    assign rA    = instruction[23:21];  // 新增：源寄存器A
    assign rB    = instruction[20:18];  // 新增：源寄存器B
    assign rd    = instruction[17:15];
    assign valC  = instruction[14:0];

    // IRMOV 指令逻辑（保持不变）
    always @(*) begin
        valM = 32'b0;
        dstM = 4'b0000;

        if (icode == 4'b0001 && ifun == 4'b0000) begin // IRMOV 指令
            valM = {{17{1'b0}}, valC}; // 零扩展立即数
            dstM = {1'b0, rd}; // 目标寄存器号扩展为 4 位
        end
    end

endmodule
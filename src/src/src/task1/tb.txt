`timescale 1ns/1ps
module tb ();
    
    reg clock;         
    reg rst_n;        
    reg [8:0] addr;     
    reg wEn;           
    reg [31:0] wDat;    
    reg working;       
    wire [3:0] icode;   
    wire [3:0] ifun;    
    wire [2:0] rA;      
    wire [2:0] rB;    
    wire [2:0] rd;  
    wire [14:0] valC;    

    localparam ZERO_DATA = 32'b0;
    localparam ZERO_ADDR = 9'b0;

    processor dut (
        .clock(clock),             
        .rst_n(rst_n),             
        .addr(addr),        
        .wEn(wEn),               
        .wDat(wDat),       
        .working(working),           
        .icode(icode),       
        .ifun(ifun),        
        .rA(rA),          
        .rB(rB),          
        .rd(rd),          
        .valC(valC)         
    );

    localparam PERIOD = 20;
    initial begin
        clock = 1'b0;
        rst_n = 1'b0;
        #(PERIOD * 2) rst_n = 1'b1;
    end
    
    initial begin
        forever #(PERIOD / 2) clock = ~clock;   
    end
         
    initial begin
        addr <= ZERO_ADDR;
        wEn <= 1'b0;
        wDat <= ZERO_DATA;
        working <= 1'b0;
        #(PERIOD * 2);

        // Write instructions to memory (working=0)
        // Instruction 1: IRMOV %r5, $22307130102 (Hex: 5319BCAF6, valC=15'h4AF6)
        addr <= 9'd0;
        wEn <= 1'b1;
        wDat <= 32'b0011_0000_000_101_101_100101011110110; // icode=3 (IRMOV), ifun=0, rA=0, rd=5, valC=15'h4AF6 (100101011110110)
        #PERIOD;

        // Instruction 2: SUB %r0, %r1, %r2
        addr <= 9'd1;
        wDat <= 32'b0010_0001_000_001_010_000000000000000; // icode=2 (OP), ifun=1 (SUB), rA=0, rB=1, rd=2
        #PERIOD;

        // Instruction 3: SLL %r1, %r2, $3
        addr <= 9'd2;
        wDat <= 32'b0011_0010_001_010_001_000000000000011; // icode=3 (IRMOV), ifun=2 (SLL), rA=1, rB=2, rd=1, valC=3
        #PERIOD;

        // Start processor (working=1)
        addr <= ZERO_ADDR;
        wEn <= 1'b0;
        wDat <= ZERO_DATA;
        working <= 1'b1;
        
        // Monitor fetch results
        $display("Time\t icode\t ifun\t rA\t rB\t rd\t valC");
        forever begin
            #PERIOD;
            $display("%0t\t %h\t %h\t %h\t %h\t %h\t %h", $time, icode, ifun, rA, rB, rd, valC);
        end
    end

    initial begin
        #(PERIOD * 6); // Run for 6 cycles total (3 write + 3 fetch)
        $finish();
    end

endmodule
`timescale 1ns/1ps
module tb ();
    // --- 输入信号 ---
    reg clock;
    reg rst_n;
    reg [8:0] addr;
    reg wEn;
    reg [31:0] wDat;
    reg working;
    
    // --- 输出信号 ---
    wire [3:0] icode, ifun;
    wire [2:0] rA, rB, rd;
    wire [14:0] valC;
    wire [31:0] valA, valB, valE, aluA, aluB;
    wire [31:0] r0, r1, r2, r3, r4, r5, r6, r7;

    localparam ZERO_DATA = 32'b0;
    localparam ZERO_ADDR = 9'b0;

    processor dut (
        .clock(clock),
        .rst_n(rst_n),
        .addr(addr),
        .wEn(wEn),
        .wDat(wDat),
        .working(working),
        .icode(icode),
        .ifun(ifun),
        .rA(rA),
        .rB(rB),
        .rd(rd),
        .valA(valA),
        .valB(valB),
        .valC(valC),
        .valE(valE),
        .aluA(aluA),
        .aluB(aluB),
        .r0(r0),
        .r1(r1),
        .r2(r2),
        .r3(r3),
        .r4(r4),
        .r5(r5),
        .r6(r6),
        .r7(r7)
    );

    // --- 时钟和复位生成 ---
    localparam PERIOD = 20;  // 50MHz
    initial begin
        clock = 0;
        rst_n = 0;
        #40 rst_n = 1;
    end
    always #(PERIOD/2) clock = ~clock;

    // --- 测试逻辑 ---
    initial begin
        // 初始化
        addr = 0; wEn = 0; wDat = 0; working = 0;
        #(PERIOD * 2);

        // 阶段1：写入指令（前8周期）
        working = 0; wEn = 1;

        // 指令0: IRMOV %r0, $学号 (0xCAF6)
        addr = 9'd0;
        wDat = 32'b0001_0000_000_000_000_1100101011110110;
        #PERIOD;

        // 指令1: IRMOV %r1, $学号+1 (0xCAF7)
        addr = 9'd1;
        wDat = 32'b0001_0000_000_000_001_1100101011110111;
        #PERIOD;

        // 指令2: IRMOV %r2, $学号+2 (0xCAF8)
        addr = 9'd2;
        wDat = 32'b0001_0000_000_000_010_1100101011111000;
        #PERIOD;

        // 指令3: IRMOV %r3, $学号+3 (0xCAF9)
        addr = 9'd3;
        wDat = 32'b0001_0000_000_000_011_1100101011111001;
        #PERIOD;

        // 指令4: ADD %r4, %r1, %r2（icode=2, ifun=0）
        addr = 9'd4;
        wDat = 32'b0010_0000_001_010_100_000000000000000;
        #PERIOD;

        // 指令5: SUB %r5, %r0, %r3（icode=2, ifun=1）
        addr = 9'd5;
        wDat = 32'b0010_0001_000_011_101_000000000000000;
        #PERIOD;

        // 指令6: OR %r6, %r1, %r0（icode=3, ifun=0）
        addr = 9'd6;
        wDat = 32'b0011_0000_001_000_110_000000000000000;
        #PERIOD;

        // 指令7: SLL %r7, %r2, $3（icode=3, ifun=1）
        addr = 9'd7;
        wDat = 32'b0011_0001_010_000_111_000000000000011;
        #PERIOD;

        // 阶段2：启动处理器执行指令（working=1）
        working = 1'b1;
        wEn     = 1'b0;

        // 运行8个周期（每条指令执行1周期）
        #(PERIOD * 12);
        // 输出结果
        $display("r0=0x%h, r1=0x%h, r2=0x%h, r3=0x%h", r0, r1, r2, r3);
        $display("r4=0x%h (ADD), r5=0x%h (SUB)", r4, r5);
        $display("r6=0x%h (OR), r7=0x%h (SLL)", r6, r7);
        $finish();
    end
endmodule
`timescale 1ns/1ps
module regfile(
    input [3:0] dstE,    // ALU目标寄存器
    input [31:0] valE,   // ALU计算结果
    input [3:0] dstM,    // IRMOV目标寄存器
    input [31:0] valM,   // IRMOV立即数
    input [2:0] rAddr1,  // 源寄存器A地址
    input [2:0] rAddr2,  // 源寄存器B地址
    output [31:0] rData1,// 源寄存器A的值
    output [31:0] rData2,// 源寄存器B的值
    input reset,         // 同步复位
    input clock,         // 时钟
    output [31:0] r0,
    output [31:0] r1,
    output [31:0] r2,
    output [31:0] r3,
    output [31:0] r4,
    output [31:0] r5,
    output [31:0] r6,
    output [31:0] r7
);
    reg [31:0] regs [0:7];
    
    // 同步复位和写回逻辑
    always @(posedge clock) begin
        if (reset) begin
            regs[0] <= 0;
            regs[1] <= 0;
            regs[2] <= 0;
            regs[3] <= 0;
            regs[4] <= 0;
            regs[5] <= 0;
            regs[6] <= 0;
            regs[7] <= 0;
        end else begin
            if (dstE <= 7) regs[dstE] <= valE;  // ALU结果写入
            if (dstM <= 7) regs[dstM] <= valM;  // IRMOV结果写入
        end
    end
    
    // 组合逻辑读取寄存器值
    assign rData1 = (rAddr1 <= 3'd7) ? regs[rAddr1] : 32'b0;
    assign rData2 = (rAddr2 <= 3'd7) ? regs[rAddr2] : 32'b0;
    
    // 直接输出寄存器值
    assign r0 = regs[0];
    assign r1 = regs[1];
    assign r2 = regs[2];
    assign r3 = regs[3];
    assign r4 = regs[4];
    assign r5 = regs[5];
    assign r6 = regs[6];
    assign r7 = regs[7];
endmodule
module regfile(
    input [3:0] dstE,    // 写入端口E的目标寄存器ID（本任务中悬空）
    input [31:0] valE,    // 写入端口E的值（本任务中悬空）
    input [3:0] dstM,    // 写入端口M的目标寄存器ID
    input [31:0] valM,    // 写入端口M的值（立即数）
    input reset,    // 同步复位信号
    input clock,    // 时钟信号
    output [31:0] r0,    // 寄存器%r0
    output [31:0] r1,    // 寄存器%r1
    output [31:0] r2,    // 寄存器%r2
    output [31:0] r3,    // 寄存器%r3
    output [31:0] r4,    // 寄存器%r4
    output [31:0] r5,    // 寄存器%r5
    output [31:0] r6,    // 寄存器%r6
    output [31:0] r7,    // 寄存器%r7
    input [2:0] rAddr1,  // 新增：读取地址1 (rs1)
    input [2:0] rAddr2,  // 新增：读取地址2 (rs2)
    output [31:0] rData1, // 新增：读取数据1 (rs1的值)
    output [31:0] rData2  // 新增：读取数据2 (rs2的值)
);

// Define names for registers used in HCL code
parameter R0 = 4'h0;
parameter R1 = 4'h1;
parameter R2 = 4'h2;
parameter R3 = 4'h3;
parameter R4 = 4'h4;
parameter R5 = 4'h5;
parameter R6 = 4'h6;
parameter R7 = 4'h7;

// Input data for each register
wire [31:0] r0_dat;
wire [31:0] r1_dat;
wire [31:0] r2_dat;
wire [31:0] r3_dat;
wire [31:0] r4_dat;
wire [31:0] r5_dat;
wire [31:0] r6_dat;
wire [31:0] r7_dat;

// Input write controls for each register
wire r0_wrt;
wire r1_wrt;
wire r2_wrt;
wire r3_wrt;
wire r4_wrt;
wire r5_wrt;
wire r6_wrt;
wire r7_wrt;

// Implement with clocked registers
cenrreg #(32) r0_reg(r0, r0_dat, r0_wrt, reset, 32'b0, clock);
cenrreg #(32) r1_reg(r1, r1_dat, r1_wrt, reset, 32'b0, clock);
cenrreg #(32) r2_reg(r2, r2_dat, r2_wrt, reset, 32'b0, clock);
cenrreg #(32) r3_reg(r3, r3_dat, r3_wrt, reset, 32'b0, clock);
cenrreg #(32) r4_reg(r4, r4_dat, r4_wrt, reset, 32'b0, clock);
cenrreg #(32) r5_reg(r5, r5_dat, r5_wrt, reset, 32'b0, clock);
cenrreg #(32) r6_reg(r6, r6_dat, r6_wrt, reset, 32'b0, clock);
cenrreg #(32) r7_reg(r7, r7_dat, r7_wrt, reset, 32'b0, clock);  // 修正：之前错误连接到r5

// 寄存器写入逻辑（根据任务要求，只使用dstM和valM）
assign r0_dat = dstM == R0 ? valM : 32'b0;
assign r1_dat = dstM == R1 ? valM : 32'b0;
assign r2_dat = dstM == R2 ? valM : 32'b0;
assign r3_dat = dstM == R3 ? valM : 32'b0;
assign r4_dat = dstM == R4 ? valM : 32'b0;
assign r5_dat = dstM == R5 ? valM : 32'b0;
assign r6_dat = dstM == R6 ? valM : 32'b0;
assign r7_dat = dstM == R7 ? valM : 32'b0;

// 寄存器写使能逻辑（根据任务要求，只使用dstM）
assign r0_wrt = dstM == R0;
assign r1_wrt = dstM == R1;
assign r2_wrt = dstM == R2;
assign r3_wrt = dstM == R3;
assign r4_wrt = dstM == R4;
assign r5_wrt = dstM == R5;
assign r6_wrt = dstM == R6;
assign r7_wrt = dstM == R7;

// 寄存器读取逻辑（新增功能）
assign rData1 = 
    (rAddr1 == 3'd0) ? r0 :
    (rAddr1 == 3'd1) ? r1 :
    (rAddr1 == 3'd2) ? r2 :
    (rAddr1 == 3'd3) ? r3 :
    (rAddr1 == 3'd4) ? r4 :
    (rAddr1 == 3'd5) ? r5 :
    (rAddr1 == 3'd6) ? r6 :
    r7;

assign rData2 = 
    (rAddr2 == 3'd0) ? r0 :
    (rAddr2 == 3'd1) ? r1 :
    (rAddr2 == 3'd2) ? r2 :
    (rAddr2 == 3'd3) ? r3 :
    (rAddr2 == 3'd4) ? r4 :
    (rAddr2 == 3'd5) ? r5 :
    (rAddr2 == 3'd6) ? r6 :
    r7;

endmodule